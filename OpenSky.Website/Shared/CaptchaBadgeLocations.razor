@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@code {
    private readonly List<string> captchaLocations = new() { "/register", "/resendvalidationemail", "/login", "/validateemail?", "/forgotpassword", "/resetpassword?" };

    protected override async Task OnInitializedAsync()
    {
        navigationManager.LocationChanged += OnLocationChange;

        if (captchaLocations.Any(loc => navigationManager.Uri.Contains(loc)))
        {
            await jsRuntime.InvokeVoidAsync("showCaptchaBadge");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("hideCaptchaBadge");
        }
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChange;
    }

    private async void OnLocationChange(object sender, LocationChangedEventArgs e)
    {
        if (captchaLocations.Any(loc => e.Location.Contains(loc)))
        {
            await jsRuntime.InvokeVoidAsync("showCaptchaBadge");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("hideCaptchaBadge");
        }
    }
}
