@page "/resetpassword"
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json
@using OpenSky.Website.OpenAPIs
@inject NavigationManager navigationManager
@inject AlertService alertService
@inject IJSRuntime jsRuntime
@inject OpenSkyService openSky
@inject UserSessionService userSession

<section id="resetpassword">
    <div class="container">
        <div class="card">
            <img src="img/resetpassword.png" alt="id card login" style="width: 50%;" />
            <h4 class="card-header">Reset your OPEN<span style="color: #08c6a4;">SKY</span> password</h4>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <InputText @bind-Value="model.Password" type="password" class="form-control" placeHolder="Password" />
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>
                    <button disabled="@loading" class="btn btn-primary" style="width: 100%">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        Reset
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</section>

<PageFooter />

@code
{
    private readonly OpenSkyApi.ResetPassword model = new();
    private bool loading;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            model.Email = email.ToString();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            model.Token = token.ToString();
        }
    }

    private async void OnValidSubmit()
    {
        alertService.Clear();
        loading = true;
        try
        {
            // Before we post the model to the API add the reCAPTCHA token
            var captchaToken = await jsRuntime.InvokeAsync<string>("runCaptcha", "resetPassword");
            model.RecaptchaToken = captchaToken;

            var response = await openSky.ResetPasswordAsync(model);
            if (response.IsError)
            {
                alertService.Error(response.Message);
                model.Password = string.Empty;
                loading = false;
                StateHasChanged();
            }
            else
            {
                await userSession.LoggedIn(response.Data);
                alertService.Success("Your password was reset successfully!", true);
                navigationManager.NavigateTo("");
            }
        }
        catch (ApiException ex)
        {
            if (!string.IsNullOrEmpty(ex.Response))
            {
                var problemDetails = JsonConvert.DeserializeObject<ValidationProblemDetails>(ex.Response);
                if (problemDetails != null)
                {
                    foreach (var problemDetailsError in problemDetails.Errors)
                    {
                        foreach (var errorMessage in problemDetailsError.Value)
                        {
                            alertService.Error(errorMessage, false, false);
                        }
                    }

                    model.Password = string.Empty;
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    alertService.Error(ex.Message, false, false);
                    model.Password = string.Empty;
                    loading = false;
                    StateHasChanged();
                }
            }
            else
            {
                alertService.Error(ex.Message, false, false);
                model.Password = string.Empty;
                loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            alertService.Error(ex.Message, false, false);
            model.Password = string.Empty;
            loading = false;
            StateHasChanged();
        }
    }
}