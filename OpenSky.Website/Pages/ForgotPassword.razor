@page "/forgotpassword"
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json
@using OpenSky.Website.OpenAPIs
@inject OpenSkyService openSky
@inject NavigationManager navigationManager
@inject AlertService alertService
@inject IJSRuntime jsRuntime
@inject IConfiguration configuration

<section id="forgotpassword">
    <div class="container">
        <div class="card">
            <img src="img/forgotpassword.png" alt="forgot password" style="width: 50%;" />
            <h4 class="card-header">Forgot your OPEN<span style="color: #08c6a4;">SKY</span> password?</h4>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <InputText @bind-Value="model.Email" class="form-control" placeHolder="Email address" />
                        <ValidationMessage For="@(() => model.Email)" />
                    </div>
                    <button disabled="@loading" class="btn btn-primary" style="width: 100%">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm"></span>
                        }
                        Reset
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</section>

<PageFooter />

@code
{
    private readonly OpenSkyApi.ForgotPassword model = new();
    private bool loading;

    private async void OnValidSubmit()
    {
        alertService.Clear();
        loading = true;
        try
        {
            // Before we post the model to the API add the reCAPTCHA token
            var captchaToken = await jsRuntime.InvokeAsync<string>("runCaptcha", "resendValidationEmail");
            model.RecaptchaToken = captchaToken;

            var response = await openSky.ForgotPasswordAsync(model);
            if (response.IsError)
            {
                alertService.Error(response.Message, false, false);
                loading = false;
                StateHasChanged();
            }
            else
            {
                alertService.Success(response.Message, true, false);
                navigationManager.NavigateTo("");
            }
        }
        catch (ApiException ex)
        {
            if (!string.IsNullOrEmpty(ex.Response))
            {
                var problemDetails = JsonConvert.DeserializeObject<ValidationProblemDetails>(ex.Response);
                if (problemDetails != null)
                {
                    foreach (var problemDetailsError in problemDetails.Errors)
                    {
                        foreach (var errorMessage in problemDetailsError.Value)
                        {
                            alertService.Error(errorMessage, false, false);
                        }
                    }

                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    alertService.Error(ex.Message, false, false);
                    loading = false;
                    StateHasChanged();
                }
            }
            else
            {
                alertService.Error(ex.Message, false, false);
                loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            alertService.Error(ex.Message, false, false);
            loading = false;
            StateHasChanged();
        }
    }
}
