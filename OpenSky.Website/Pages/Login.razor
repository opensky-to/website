@page "/login"
@using Newtonsoft.Json
@using OpenSky.Website.OpenAPIs
@inject OpenSkyService openSky
@inject NavigationManager navigationManager
@inject AlertService alertService
@inject UserSessionService userSession
@inject IJSRuntime jsRuntime

<section id="login">
    <div class="container">
        <div style="flex-direction: column">
            <Alert />
            <div class="card" style="width: 450px; align-items: center;">
                <img src="img/idcard.svg" alt="id card login" style="width: 50%;" />
                <h4 class="card-header">
                    Login to OPEN<span style="color: #08c6a4;">SKY</span>
                </h4>
                <div class="card-body" style="width: 100%">
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <InputText @bind-Value="model.Username" class="form-control" placeHolder="Username" />
                            <ValidationMessage For="@(() => model.Username)" />
                        </div>
                        <div class="form-group">
                            <InputText @bind-Value="model.Password" type="password" class="form-control" placeHolder="Password" />
                            <ValidationMessage For="@(() => model.Password)" />
                        </div>
                        <div class="form-group" style="padding-bottom: 30px;">
                            <div class="custom-checkbox">
                                <InputCheckbox @bind-Value="rememberMe" id="rememberMeCheck"></InputCheckbox>
                                <label class="remember-me" for="rememberMeCheck" style="float: left;">Remember me</label>
                            </div>
                            
                            <NavLink href="forgotpassword" style="float: right;">Forgot your password?</NavLink>
                        </div>
                        <button disabled="@loading" class="btn btn-primary" style="width: 100%">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                            }
                            Login
                        </button>
                        <div style="margin-top: 30px; text-align: center; width: 100%; color: #bbb;">
                            Not registered? <NavLink href="register">Create an Account</NavLink>
                            <br />
                            Validation email didn't arrive? <NavLink href="resendvalidationemail">Send it again</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</section>

<PageFooter />

@code
    {
    bool rememberMe;
    private readonly OpenSkyApi.Login model = new();
    private bool loading;

    private async void OnValidSubmit()
    {
        alertService.Clear();
        loading = true;
        try
        {
            // Before we post the model to the API add the reCAPTCHA token
            var captchaToken = await jsRuntime.InvokeAsync<string>("runCaptcha", "login");
            model.RecaptchaToken = captchaToken;

            var response = await openSky.LoginAsync(model);
            if (response.IsError)
            {
                alertService.Error(response.Message);
                model.Password = string.Empty;
                loading = false;
                StateHasChanged();
            }
            else
            {
                await userSession.LoggedIn(response.Data);
                var returnUrl = navigationManager.QueryString("returnUrl") ?? "";
                navigationManager.NavigateTo(returnUrl);
            }
        }
        catch (ApiException ex)
        {
            if (!string.IsNullOrEmpty(ex.Response))
            {
                var problemDetails = JsonConvert.DeserializeObject<ValidationProblemDetails>(ex.Response);
                if (problemDetails != null)
                {
                    foreach (var problemDetailsError in problemDetails.Errors)
                    {
                        foreach (var errorMessage in problemDetailsError.Value)
                        {
                            alertService.Error(errorMessage, false, false);
                        }
                    }

                    model.Password = string.Empty;
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    alertService.Error(ex.Message, false, false);
                    model.Password = string.Empty;
                    loading = false;
                    StateHasChanged();
                }
            }
            else
            {
                alertService.Error(ex.Message, false, false);
                model.Password = string.Empty;
                loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            alertService.Error(ex.Message, false, false);
            model.Password = string.Empty;
            loading = false;
            StateHasChanged();
        }
    }
}
