@page "/changepassword"
@using Newtonsoft.Json
@using OpenSky.Website.OpenAPIs
@inject OpenSkyService openSky
@inject NavigationManager navigationManager
@inject AlertService alertService

<div class="card">
    <h4 class="card-header">Change Password</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <label>New Password</label>
                <InputText @bind-Value="model.NewPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.NewPassword)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Change Password
            </button>
        </EditForm>
    </div>
</div>

@code {

    private readonly OpenSkyApi.ChangePassword model = new();
    private bool loading;

    private async void OnValidSubmit()
    {
        alertService.Clear();
        loading = true;
        try
        {
            var response = await openSky.ChangePasswordAsync(model);
            if (response.IsError)
            {
                alertService.Error(response.Message);
                model.Password = string.Empty;
                model.NewPassword = string.Empty;
                loading = false;
                StateHasChanged();
            }
            else
            {
                alertService.Success(response.Message, true);
                var returnUrl = navigationManager.QueryString("returnUrl") ?? "";
                navigationManager.NavigateTo(returnUrl);
            }
        }
        catch (ApiException ex)
        {
            if (!string.IsNullOrEmpty(ex.Response))
            {
                var problemDetails = JsonConvert.DeserializeObject<ValidationProblemDetails>(ex.Response);
                if (problemDetails != null)
                {
                    foreach (var problemDetailsError in problemDetails.Errors)
                    {
                        foreach (var errorMessage in problemDetailsError.Value)
                        {
                            alertService.Error(errorMessage, false, false);
                        }
                    }

                    model.Password = string.Empty;
                    model.NewPassword = string.Empty;
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    alertService.Error(ex.Message, false, false);
                    model.Password = string.Empty;
                    model.NewPassword = string.Empty;
                    loading = false;
                    StateHasChanged();
                }
            }
            else
            {
                alertService.Error(ex.Message, false, false);
                model.Password = string.Empty;
                model.NewPassword = string.Empty;
                loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            alertService.Error(ex.Message, false, false);
            model.Password = string.Empty;
            model.NewPassword = string.Empty;
            loading = false;
            StateHasChanged();
        }
    }
}
