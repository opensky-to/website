@page "/validateemail"
@using Microsoft.AspNetCore.WebUtilities
@inject OpenSkyService OpenSky
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<section id="validateemail">
    <div class="container">
        @if (showInfo)
        {
            <div class="card">
                <img src="img/processing.png" alt="id card login" style="width: 50%;" />
                <h4 class="card-header">Validating email address</h4>
                <div class="card-body">
                    <p>
                        <span class="spinner-border spinner-border-sm"></span>
                        Please wait while we verify your email address against your account record...
                    </p>
                </div>
            </div>
        }

        @if (success)
        {
            <div class="card">
                <img src="img/welcomehooray.png" alt="id card login" style="width: 50%;" />
                <h4 class="card-header">Welcome to OPEN<span style="color: #08c6a4;">SKY</span></h4>
                <div class="card-body">
                    <p>@replyMessage</p>
                </div>
            </div>
        }

        @if (error)
        {
            <div class="card">
                <img src="img/slipbanana.png" alt="id card login" style="width: 50%;" />
                <h4 class="card-header">Oh oh, that didn't work!</h4>
                <div class="card-body">
                    <p>@replyMessage</p>
                </div>
            </div>
        }
    </div>
</section>

<PageFooter />

@code
{
    private readonly OpenSkyApi.ValidateEmail model = new();
    private bool showInfo = true;
    private bool success;
    private bool error;
    private string replyMessage;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            model.Email = email.ToString();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            model.Token = token.ToString();
        }

        await ValidateEmailAddress();
    }

    private async Task ValidateEmailAddress()
    {
        try
        {
            await Task.Delay(1000);

            // Before we post the model to the API add the reCAPTCHA token
            var captchaToken = await JsRuntime.InvokeAsync<string>("runCaptcha", "validateEmail");
            model.RecaptchaToken = captchaToken;

            var response = await OpenSky.ValidateEmailAsync(model);
            if (response.IsError)
            {
                showInfo = true;
                error = true;
                replyMessage = response.Message;
                StateHasChanged();
            }
            else
            {
                replyMessage = response.Message;
                showInfo = false;
                success = true;
                StateHasChanged();

                await Task.Delay(10 * 1000);
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            replyMessage = ex.Message;
            showInfo = false;
            error = true;
            StateHasChanged();
        }
    }
}
